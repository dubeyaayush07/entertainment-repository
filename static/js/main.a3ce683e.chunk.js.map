{"version":3,"sources":["components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","src","this","props","imageUrl","alt","name","Component","MOVIE","apiKey","concat","process","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","content","type","query","loadContent","bind","assertThisInitialized","searchContent","handleClick","handleChange","handleSubmit","_this2","url","axios","get","then","res","results","data","setState","_this3","e","newType","target","value","newQuery","preventDefault","cards","map","element","i","src_components_Card","undefined","title","poster_path","key","onSubmit","onChange","placeholder","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3ce683e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.css'\n\n\nclass Card extends Component {\n    render() {\n        return (\n            <div className=\"card\">\n                <div className=\"card-image\">\n                    <img src={this.props.imageUrl} alt={this.props.name} />\n                </div>\n                <div className=\"card-name\">{this.props.name}</div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Card from \"./components/Card\"\n\nconst MOVIE = \"movie\";\nconst TV = \"tv\";\nconst IMAGE_URL  = \"http://image.tmdb.org/t/p/w185\";\nconst apiKey = `${process.env.REACT_APP_ENTERTAINMENT_API_KEY}`;\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      content: [],\n      type: MOVIE,\n      query: \"\"\n    }\n\n    this.loadContent = this.loadContent.bind(this);\n    this.searchContent = this.searchContent.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange= this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadContent(this.state.type);\n  }\n\n  loadContent(type) {\n    let url = \"https://api.themoviedb.org/3/\";\n    if (type === MOVIE) url += \"movie/popular?api_key=\" + apiKey + \"&language=en-US&page=1\";\n    else if (type === TV) url += \"tv/popular?api_key=\" + apiKey + \"&language=en-US&page=1\";\n    \n    axios.get(url)\n      .then(res => {\n        const results = res.data.results;\n        this.setState({\n          content: results\n        });\n      })\n  }\n\n  searchContent(query) {\n    let url = \"https://api.themoviedb.org/3/search/multi?api_key=\" + apiKey + \"&language=en-US&query=\" + query + \"&page=1&include_adult=false\";    \n    \n    axios.get(url)\n      .then(res => {\n        const results = res.data.results;\n        this.setState({\n          content: results\n        });\n      })\n  }\n\n  handleClick(e) {\n    const newType = e.target.value;\n    this.loadContent(newType);\n    this.setState({type: newType});\n  }\n\n  handleChange(e) {\n    const newQuery = e.target.value;\n    this.setState({query: newQuery});\n  }\n\n  handleSubmit(e) {\n    const query = this.state.query;\n    if (query !== '') {\n      this.searchContent(query);\n    }\n    e.preventDefault();\n  }\n\n  render() {\n    const cards = this.state.content.map( (element, i) => {\n      return (\n        <Card name={element.title === undefined ?  element.name : element.title } imageUrl={IMAGE_URL + element.poster_path} key={i} />\n      );\n    });\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Entertainment Repository\n        </header>\n        <form onSubmit={this.handleSubmit} className=\"search-form\">\n          <input type=\"text\" onChange={this.handleChange} className=\"search-input\" placeholder=\"Type the name of a movie or a tv show\" />\n          <button className=\"submit-btn\">Search</button>\n        </form>\n        <div className=\"select-btns\">\n          <button className=\"select-btn\" value={MOVIE} onClick={this.handleClick}>Movies</button>\n          <button className=\"select-btn\" value={TV} onClick={this.handleClick}>Television</button>\n        </div>\n        <div className=\"cards\">\n            {cards}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}